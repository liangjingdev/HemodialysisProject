package com.liangjing.hemodialysisproject.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOCTOR_ENTITY".
*/
public class DoctorEntityDao extends AbstractDao<DoctorEntity, Long> {

    public static final String TABLENAME = "DOCTOR_ENTITY";

    /**
     * Properties of entity DoctorEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DoctorName = new Property(1, String.class, "doctorName", false, "doctorName");
        public final static Property DoctorRealName = new Property(2, String.class, "doctorRealName", false, "doctorRealName");
        public final static Property DoctorGender = new Property(3, String.class, "doctorGender", false, "doctorGender");
        public final static Property DoctorLocation = new Property(4, String.class, "doctorLocation", false, "doctorLocation");
        public final static Property DoctorCellPhone = new Property(5, String.class, "doctorCellPhone", false, "doctorCellPhone");
        public final static Property DoctorIdNumber = new Property(6, String.class, "doctorIdNumber", false, "doctorIdNumber");
        public final static Property DoctorBirthday = new Property(7, String.class, "doctorBirthday", false, "doctorBirthday");
        public final static Property DoctorEmail = new Property(8, String.class, "doctorEmail", false, "userEmail");
        public final static Property DoctorPassword = new Property(9, String.class, "doctorPassword", false, "userPassword");
        public final static Property DoctorHeadPortrait = new Property(10, byte[].class, "doctorHeadPortrait", false, "doctorHeadPortrait");
    }


    public DoctorEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DoctorEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCTOR_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"doctorName\" TEXT," + // 1: doctorName
                "\"doctorRealName\" TEXT," + // 2: doctorRealName
                "\"doctorGender\" TEXT," + // 3: doctorGender
                "\"doctorLocation\" TEXT," + // 4: doctorLocation
                "\"doctorCellPhone\" TEXT," + // 5: doctorCellPhone
                "\"doctorIdNumber\" TEXT," + // 6: doctorIdNumber
                "\"doctorBirthday\" TEXT," + // 7: doctorBirthday
                "\"userEmail\" TEXT," + // 8: doctorEmail
                "\"userPassword\" TEXT," + // 9: doctorPassword
                "\"doctorHeadPortrait\" BLOB);"); // 10: doctorHeadPortrait
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCTOR_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DoctorEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String doctorName = entity.getDoctorName();
        if (doctorName != null) {
            stmt.bindString(2, doctorName);
        }
 
        String doctorRealName = entity.getDoctorRealName();
        if (doctorRealName != null) {
            stmt.bindString(3, doctorRealName);
        }
 
        String doctorGender = entity.getDoctorGender();
        if (doctorGender != null) {
            stmt.bindString(4, doctorGender);
        }
 
        String doctorLocation = entity.getDoctorLocation();
        if (doctorLocation != null) {
            stmt.bindString(5, doctorLocation);
        }
 
        String doctorCellPhone = entity.getDoctorCellPhone();
        if (doctorCellPhone != null) {
            stmt.bindString(6, doctorCellPhone);
        }
 
        String doctorIdNumber = entity.getDoctorIdNumber();
        if (doctorIdNumber != null) {
            stmt.bindString(7, doctorIdNumber);
        }
 
        String doctorBirthday = entity.getDoctorBirthday();
        if (doctorBirthday != null) {
            stmt.bindString(8, doctorBirthday);
        }
 
        String doctorEmail = entity.getDoctorEmail();
        if (doctorEmail != null) {
            stmt.bindString(9, doctorEmail);
        }
 
        String doctorPassword = entity.getDoctorPassword();
        if (doctorPassword != null) {
            stmt.bindString(10, doctorPassword);
        }
 
        byte[] doctorHeadPortrait = entity.getDoctorHeadPortrait();
        if (doctorHeadPortrait != null) {
            stmt.bindBlob(11, doctorHeadPortrait);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DoctorEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String doctorName = entity.getDoctorName();
        if (doctorName != null) {
            stmt.bindString(2, doctorName);
        }
 
        String doctorRealName = entity.getDoctorRealName();
        if (doctorRealName != null) {
            stmt.bindString(3, doctorRealName);
        }
 
        String doctorGender = entity.getDoctorGender();
        if (doctorGender != null) {
            stmt.bindString(4, doctorGender);
        }
 
        String doctorLocation = entity.getDoctorLocation();
        if (doctorLocation != null) {
            stmt.bindString(5, doctorLocation);
        }
 
        String doctorCellPhone = entity.getDoctorCellPhone();
        if (doctorCellPhone != null) {
            stmt.bindString(6, doctorCellPhone);
        }
 
        String doctorIdNumber = entity.getDoctorIdNumber();
        if (doctorIdNumber != null) {
            stmt.bindString(7, doctorIdNumber);
        }
 
        String doctorBirthday = entity.getDoctorBirthday();
        if (doctorBirthday != null) {
            stmt.bindString(8, doctorBirthday);
        }
 
        String doctorEmail = entity.getDoctorEmail();
        if (doctorEmail != null) {
            stmt.bindString(9, doctorEmail);
        }
 
        String doctorPassword = entity.getDoctorPassword();
        if (doctorPassword != null) {
            stmt.bindString(10, doctorPassword);
        }
 
        byte[] doctorHeadPortrait = entity.getDoctorHeadPortrait();
        if (doctorHeadPortrait != null) {
            stmt.bindBlob(11, doctorHeadPortrait);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DoctorEntity readEntity(Cursor cursor, int offset) {
        DoctorEntity entity = new DoctorEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // doctorName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // doctorRealName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // doctorGender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // doctorLocation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // doctorCellPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // doctorIdNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // doctorBirthday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // doctorEmail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // doctorPassword
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10) // doctorHeadPortrait
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DoctorEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDoctorName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDoctorRealName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDoctorGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDoctorLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDoctorCellPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDoctorIdNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDoctorBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDoctorEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDoctorPassword(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDoctorHeadPortrait(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DoctorEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DoctorEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DoctorEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
