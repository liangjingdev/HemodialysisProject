package com.liangjing.hemodialysisproject.entity;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT_SCHEME_ENTITY".
*/
public class PatientSchemeEntityDao extends AbstractDao<PatientSchemeEntity, Long> {

    public static final String TABLENAME = "PATIENT_SCHEME_ENTITY";

    /**
     * Properties of entity PatientSchemeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SchemeId = new Property(1, Long.class, "schemeId", false, "SCHEME_ID");
        public final static Property PatientName = new Property(2, String.class, "patientName", false, "PATIENT_NAME");
        public final static Property DoctorName = new Property(3, String.class, "doctorName", false, "DOCTOR_NAME");
        public final static Property DialysisTime = new Property(4, String.class, "dialysisTime", false, "DIALYSIS_TIME");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property MachineNumber = new Property(6, String.class, "machineNumber", false, "MACHINE_NUMBER");
        public final static Property DialysisScheme = new Property(7, String.class, "dialysisScheme", false, "DIALYSIS_SCHEME");
    }

    private Query<PatientSchemeEntity> userEntity_SchemeLiistQuery;

    public PatientSchemeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PatientSchemeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT_SCHEME_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SCHEME_ID\" INTEGER," + // 1: schemeId
                "\"PATIENT_NAME\" TEXT," + // 2: patientName
                "\"DOCTOR_NAME\" TEXT," + // 3: doctorName
                "\"DIALYSIS_TIME\" TEXT," + // 4: dialysisTime
                "\"LOCATION\" TEXT," + // 5: location
                "\"MACHINE_NUMBER\" TEXT," + // 6: machineNumber
                "\"DIALYSIS_SCHEME\" TEXT);"); // 7: dialysisScheme
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT_SCHEME_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PatientSchemeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long schemeId = entity.getSchemeId();
        if (schemeId != null) {
            stmt.bindLong(2, schemeId);
        }
 
        String patientName = entity.getPatientName();
        if (patientName != null) {
            stmt.bindString(3, patientName);
        }
 
        String doctorName = entity.getDoctorName();
        if (doctorName != null) {
            stmt.bindString(4, doctorName);
        }
 
        String dialysisTime = entity.getDialysisTime();
        if (dialysisTime != null) {
            stmt.bindString(5, dialysisTime);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String machineNumber = entity.getMachineNumber();
        if (machineNumber != null) {
            stmt.bindString(7, machineNumber);
        }
 
        String dialysisScheme = entity.getDialysisScheme();
        if (dialysisScheme != null) {
            stmt.bindString(8, dialysisScheme);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PatientSchemeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long schemeId = entity.getSchemeId();
        if (schemeId != null) {
            stmt.bindLong(2, schemeId);
        }
 
        String patientName = entity.getPatientName();
        if (patientName != null) {
            stmt.bindString(3, patientName);
        }
 
        String doctorName = entity.getDoctorName();
        if (doctorName != null) {
            stmt.bindString(4, doctorName);
        }
 
        String dialysisTime = entity.getDialysisTime();
        if (dialysisTime != null) {
            stmt.bindString(5, dialysisTime);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String machineNumber = entity.getMachineNumber();
        if (machineNumber != null) {
            stmt.bindString(7, machineNumber);
        }
 
        String dialysisScheme = entity.getDialysisScheme();
        if (dialysisScheme != null) {
            stmt.bindString(8, dialysisScheme);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PatientSchemeEntity readEntity(Cursor cursor, int offset) {
        PatientSchemeEntity entity = new PatientSchemeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // schemeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // patientName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // doctorName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dialysisTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // machineNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // dialysisScheme
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PatientSchemeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSchemeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPatientName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDoctorName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDialysisTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMachineNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDialysisScheme(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PatientSchemeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PatientSchemeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PatientSchemeEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "schemeLiist" to-many relationship of UserEntity. */
    public List<PatientSchemeEntity> _queryUserEntity_SchemeLiist(Long schemeId) {
        synchronized (this) {
            if (userEntity_SchemeLiistQuery == null) {
                QueryBuilder<PatientSchemeEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SchemeId.eq(null));
                userEntity_SchemeLiistQuery = queryBuilder.build();
            }
        }
        Query<PatientSchemeEntity> query = userEntity_SchemeLiistQuery.forCurrentThread();
        query.setParameter(0, schemeId);
        return query.list();
    }

}
