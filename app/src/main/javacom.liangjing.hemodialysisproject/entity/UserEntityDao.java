package /entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liangjing.hemodialysisproject.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "userName");
        public final static Property RealName = new Property(2, String.class, "realName", false, "realName");
        public final static Property UserGender = new Property(3, String.class, "userGender", false, "userGender");
        public final static Property UserLocation = new Property(4, String.class, "userLocation", false, "userLocation");
        public final static Property CellPhone = new Property(5, String.class, "cellPhone", false, "cellPhone");
        public final static Property DiagnosisNumber = new Property(6, String.class, "diagnosisNumber", false, "diagnosisNumber");
        public final static Property IdNumber = new Property(7, String.class, "idNumber", false, "idNumber");
        public final static Property UserBirthday = new Property(8, String.class, "userBirthday", false, "userBirthday");
        public final static Property UserEmail = new Property(9, String.class, "userEmail", false, "userEmail");
        public final static Property UserPassword = new Property(10, String.class, "userPassword", false, "userPassword");
        public final static Property HeadPortrait = new Property(11, byte[].class, "headPortrait", false, "headPortrait");
    }

    private DaoSession daoSession;


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"userName\" TEXT," + // 1: userName
                "\"realName\" TEXT," + // 2: realName
                "\"userGender\" TEXT," + // 3: userGender
                "\"userLocation\" TEXT," + // 4: userLocation
                "\"cellPhone\" TEXT," + // 5: cellPhone
                "\"diagnosisNumber\" TEXT," + // 6: diagnosisNumber
                "\"idNumber\" TEXT," + // 7: idNumber
                "\"userBirthday\" TEXT," + // 8: userBirthday
                "\"userEmail\" TEXT," + // 9: userEmail
                "\"userPassword\" TEXT," + // 10: userPassword
                "\"headPortrait\" BLOB);"); // 11: headPortrait
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(3, realName);
        }
 
        String userGender = entity.getUserGender();
        if (userGender != null) {
            stmt.bindString(4, userGender);
        }
 
        String userLocation = entity.getUserLocation();
        if (userLocation != null) {
            stmt.bindString(5, userLocation);
        }
 
        String cellPhone = entity.getCellPhone();
        if (cellPhone != null) {
            stmt.bindString(6, cellPhone);
        }
 
        String diagnosisNumber = entity.getDiagnosisNumber();
        if (diagnosisNumber != null) {
            stmt.bindString(7, diagnosisNumber);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(8, idNumber);
        }
 
        String userBirthday = entity.getUserBirthday();
        if (userBirthday != null) {
            stmt.bindString(9, userBirthday);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(10, userEmail);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(11, userPassword);
        }
 
        byte[] headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindBlob(12, headPortrait);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(3, realName);
        }
 
        String userGender = entity.getUserGender();
        if (userGender != null) {
            stmt.bindString(4, userGender);
        }
 
        String userLocation = entity.getUserLocation();
        if (userLocation != null) {
            stmt.bindString(5, userLocation);
        }
 
        String cellPhone = entity.getCellPhone();
        if (cellPhone != null) {
            stmt.bindString(6, cellPhone);
        }
 
        String diagnosisNumber = entity.getDiagnosisNumber();
        if (diagnosisNumber != null) {
            stmt.bindString(7, diagnosisNumber);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(8, idNumber);
        }
 
        String userBirthday = entity.getUserBirthday();
        if (userBirthday != null) {
            stmt.bindString(9, userBirthday);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(10, userEmail);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(11, userPassword);
        }
 
        byte[] headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindBlob(12, headPortrait);
        }
    }

    @Override
    protected final void attachEntity(UserEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // realName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userGender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userLocation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cellPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // diagnosisNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // idNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userBirthday
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userEmail
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userPassword
            cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11) // headPortrait
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRealName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCellPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDiagnosisNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserBirthday(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHeadPortrait(cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
